#!/usr/bin/env ruby
require_relative "repository"

# exit if script called with no arguments
exit if ARGV.length == 0

# get command line arguments
cmd = ARGV[0]
args = ARGV[1..ARGV.length]


# creates an empty repository
if cmd == "init" or cmd == "create"
    repo = Repository.new(".", true)
    exit
elsif cmd == "clone"
    source = args[0]
    if File.directory?(source+"/.jsaw")
        repo = Repository.new(source)
    else
        p "no repo found in source"
    end
else
    repo = Repository.new()
end

# TODO: Do we need a branch command?

case cmd
# add speific files for tracking
# maybe starts with simple single file additions
# and then add ability to accept patterns
when "add"
    repo.add(args)
# remove specific files from tracking list
when "remove"
    repo.delete(args)
# check the status of the current repo compared to the head
when "status"
    repo.diffdir(repo.root)
# print out the current heads
when "heads"
    repo.getHead()
when "diff"

when "checkout"
    rev = repo.changelog.tip()
    rev = args[0].to_i unless args.empty?
    repo.checkout(rev)
# output a file version from a given revision
when "cat"
    if args.empty?
        puts "You must have a filename to revision"
    else
        rev = repo.changelog.tip
        rev = args[1].to_i unless args.length <= 1
        filename = args[0].to_s
        repo.cat(filename, rev)
    end
when "commit"
    if args.empty?
        puts "You must have a message to commit"
        exit
    end
    repo.commit(args[0])
# print the changelog (i.e. revision history)
when "log"
    (repo.changelog.tip + 1).times do |i|
        changes = repo.changelog.changeset(i)
        p1, p2 = repo.changelog.parents(i)
        print "#{i}: #{p1} #{p2} #{repo.changelog.node(i)} "
        print "\nmanifest nodeid:", changes[0]
        print "\nuser:", changes[1]
        print "\nchanged files:"
        changes[3].each {|f| print "\n", f}
        print "description:"
        print "\n#{changes[4]}\n"
    end
# merge two revisions
when "merge"
    other = Repository.new(args[0])
    repo.merge(other)
# pull the changes from another repository
when "pull"
    # TODO
    # push the changes into another repository
when "push"
    # TODO
when "clone"
    destination = Dir.pwd
    system("cp -r #{source}/.jsaw #{destination}" )
    current = File.open("./.jsaw/current").read().to_i
    files = repo.manifest.manifest(current)
    files.each{|f|
        system("#{source}/jsaw cat #{f[0]} #{current} > #{f[0]}")
    }
    
    
when "help"
    puts "Valid commands:"
    puts "init"
    puts "add"
    puts "remove"
    puts "status"
    puts "heads"
    puts "diff"
    puts "clone"
    puts "checkout"
    puts "cat"
    puts "commit"
    puts "log"
    puts "merge"
    puts "push"
    puts "pull"
else
    puts "jsaw: '#{cmd}' is not a valid command. See 'jsaw help'."
end
